import { QualityPreset } from '@/types';

export const QUALITY_PRESETS: QualityPreset[] = [
  {
    name: 'fast',
    label: 'Îπ†Î•∏ Î≥ÄÌôò',
    description: 'Îπ†Î•∏ ÏÜçÎèÑ, ÏûëÏùÄ ÌååÏùº ÌÅ¨Í∏∞',
    webmSettings: {
      crf: 35,
      codec: 'vp8',
      fps: 15,
      width: 480,
      height: 360
    },
    gifSettings: {
      fps: 12,
      quality: 'low',
      optimize: false,
      width: 400,
      height: 300
    },
    estimatedSizeMultiplier: 0.3,
    conversionTime: 'fast'
  },
  {
    name: 'balanced',
    label: 'Í∑†ÌòïÏû°Ìûå ÌíàÏßà',
    description: 'Ï†ÅÎãπÌïú ÏÜçÎèÑÏôÄ ÌíàÏßàÏùò Í∑†Ìòï',
    webmSettings: {
      crf: 25,
      codec: 'vp8',
      fps: 24,
      width: 640,
      height: 480
    },
    gifSettings: {
      fps: 15,
      quality: 'medium',
      optimize: true,
      width: 540,
      height: 405
    },
    estimatedSizeMultiplier: 0.6,
    conversionTime: 'medium'
  },
  {
    name: 'high_quality',
    label: 'Í≥†ÌíàÏßà',
    description: 'ÏõêÎ≥∏Ïóê Í∞ÄÍπåÏö¥ ÌíàÏßà, ÌÅ∞ ÌååÏùº ÌÅ¨Í∏∞',
    webmSettings: {
      crf: 15,
      codec: 'vp9',
      fps: 30,
      // ÏõêÎ≥∏ Ìï¥ÏÉÅÎèÑ Ïú†ÏßÄ (width, height ÏóÜÏùå)
    },
    gifSettings: {
      fps: 20,
      quality: 'high',
      optimize: true,
      // ÏõêÎ≥∏ Ìï¥ÏÉÅÎèÑ Ïú†ÏßÄ
    },
    estimatedSizeMultiplier: 1.2,
    conversionTime: 'slow'
  },
  {
    name: 'original',
    label: 'ÏõêÎ≥∏ ÌíàÏßà',
    description: 'ÏõêÎ≥∏Í≥º ÎèôÏùºÌïú ÌíàÏßà, Í∞ÄÏû• ÌÅ∞ ÌååÏùº',
    webmSettings: {
      crf: 10,
      codec: 'vp9',
      // ÏõêÎ≥∏ FPS, Ìï¥ÏÉÅÎèÑ Î™®Îëê Ïú†ÏßÄ
    },
    gifSettings: {
      quality: 'high',
      optimize: true,
      // ÏõêÎ≥∏ ÏÑ§Ï†ï Ïú†ÏßÄ
    },
    estimatedSizeMultiplier: 1.8,
    conversionTime: 'slow'
  }
];

export function getQualityPreset(name: string): QualityPreset {
  return QUALITY_PRESETS.find(preset => preset.name === name) || QUALITY_PRESETS[1]; // Í∏∞Î≥∏Í∞í: balanced
}

export function getConversionTimeIcon(time: QualityPreset['conversionTime']): string {
  switch (time) {
    case 'fast': return '‚ö°';
    case 'medium': return '‚è±Ô∏è';
    case 'slow': return 'üêå';
    default: return '‚è±Ô∏è';
  }
}

export function getEstimatedTime(baseTimeSeconds: number, preset: QualityPreset): number {
  const multipliers = {
    fast: 0.5,
    medium: 1.0,
    slow: 2.5
  };
  
  return Math.round(baseTimeSeconds * multipliers[preset.conversionTime]);
}